// Copyright 2024 Golem Cloud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use golem_wasm_ast::analysis::AnalysisContext;
use golem_wasm_ast::component::Component;
use golem_wasm_ast::IgnoreAllButMetadata;
use golem_wasm_rpc_stubgen::cargo::generate_cargo_toml;
use golem_wasm_rpc_stubgen::compilation::compile;
use golem_wasm_rpc_stubgen::rust::generate_stub_source;
use golem_wasm_rpc_stubgen::stub::StubDefinition;
use golem_wasm_rpc_stubgen::wit::{copy_wit_files, generate_stub_wit};
use golem_wasm_rpc_stubgen::WasmRpcOverride;
use heck::ToSnakeCase;
use std::path::Path;
use tempfile::tempdir;

///! Tests in this module are verifying the STUB WASM created by the stub generator,
///! regardless of how the actual wasm generator is implemented. (Currently generates Rust code and compiles it)

#[tokio::test]
async fn all_wit_types() {
    // TODO: extract some of to the main `build` module
    let source_wit_root = Path::new("test-data/all-wit-types");
    let target_root = tempdir().unwrap();
    let canonical_target_root = target_root.path().canonicalize().unwrap();

    let def = StubDefinition::new(
        source_wit_root,
        target_root.path(),
        &None,
        "1.0.0",
        &WasmRpcOverride {
            wasm_rpc_version_override: None,
            wasm_rpc_path_override: Some(
                std::env::current_dir()
                    .unwrap()
                    .parent()
                    .unwrap()
                    .join("wasm-rpc")
                    .to_string_lossy()
                    .to_string(),
            ),
        },
        false,
    )
    .unwrap();
    generate_stub_wit(&def).unwrap();
    copy_wit_files(&def).unwrap();
    let _ = def.verify_target_wits().unwrap();

    generate_cargo_toml(&def).unwrap();
    generate_stub_source(&def).unwrap();
    compile(&canonical_target_root).await.unwrap();

    let wasm_path = canonical_target_root
        .join("target")
        .join("wasm32-wasi")
        .join("release")
        .join(format!(
            "{}.wasm",
            def.target_crate_name().unwrap().to_snake_case()
        ));

    let stub_bytes = std::fs::read(wasm_path).unwrap();
    let stub_component = Component::<IgnoreAllButMetadata>::from_bytes(&stub_bytes).unwrap();

    let state = AnalysisContext::new(stub_component);
    let stub_exports = state.get_top_level_exports().unwrap();

    // [Instance(AnalysedInstance { name: "test:main-stub/stub-api", functions: [AnalysedFunction { name: "[method]future-get-bool-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(0), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-get-bool-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(0), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Bool(TypeBool) }) }] }, AnalysedFunction { name: "[method]future-identity-bool-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(2), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-bool-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(2), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Bool(TypeBool) }) }] }, AnalysedFunction { name: "[method]future-identity-s8-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(3), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-s8-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(3), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: S8(TypeS8) }) }] }, AnalysedFunction { name: "[method]future-identity-s16-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(4), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-s16-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(4), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: S16(TypeS16) }) }] }, AnalysedFunction { name: "[method]future-identity-s32-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(5), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-s32-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(5), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: S32(TypeS32) }) }] }, AnalysedFunction { name: "[method]future-identity-s64-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(6), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-s64-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(6), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: S64(TypeS64) }) }] }, AnalysedFunction { name: "[method]future-identity-u8-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(7), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-u8-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(7), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: U8(TypeU8) }) }] }, AnalysedFunction { name: "[method]future-identity-u16-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(8), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-u16-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(8), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: U16(TypeU16) }) }] }, AnalysedFunction { name: "[method]future-identity-u32-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(9), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-u32-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(9), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: U32(TypeU32) }) }] }, AnalysedFunction { name: "[method]future-identity-u64-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(10), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-u64-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(10), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: U64(TypeU64) }) }] }, AnalysedFunction { name: "[method]future-identity-f32-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(11), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-f32-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(11), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: F32(TypeF32) }) }] }, AnalysedFunction { name: "[method]future-identity-f64-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(12), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-f64-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(12), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: F64(TypeF64) }) }] }, AnalysedFunction { name: "[method]future-identity-char-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(13), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-char-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(13), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Chr(TypeChr) }) }] }, AnalysedFunction { name: "[method]future-identity-string-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(14), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-identity-string-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(14), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Str(TypeStr) }) }] }, AnalysedFunction { name: "[method]future-get-orders-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(15), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-get-orders-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(15), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: List(TypeList { inner: Record(TypeRecord { fields: [NameTypePair { name: "order-id", typ: Str(TypeStr) }, NameTypePair { name: "items", typ: List(TypeList { inner: Record(TypeRecord { fields: [NameTypePair { name: "product-id", typ: Str(TypeStr) }, NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "price", typ: F32(TypeF32) }, NameTypePair { name: "quantity", typ: U32(TypeU32) }] }) }) }, NameTypePair { name: "total", typ: F32(TypeF32) }, NameTypePair { name: "timestamp", typ: U64(TypeU64) }] }) }) }) }] }, AnalysedFunction { name: "[method]future-apply-metadata-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(16), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-apply-metadata-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(16), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Option(TypeOption { inner: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }) }) }] }, AnalysedFunction { name: "[method]future-get-option-bool-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(17), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-get-option-bool-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(17), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Option(TypeOption { inner: Bool(TypeBool) }) }) }] }, AnalysedFunction { name: "[method]future-get-coordinates-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(18), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-get-coordinates-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(18), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }) }] }, AnalysedFunction { name: "[method]future-get-coordinates-alias-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(19), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-get-coordinates-alias-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(19), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }) }] }, AnalysedFunction { name: "[method]future-tuple-to-point-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(20), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-tuple-to-point-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(20), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Result(TypeResult { ok: Some(Record(TypeRecord { fields: [NameTypePair { name: "x", typ: S32(TypeS32) }, NameTypePair { name: "y", typ: S32(TypeS32) }, NameTypePair { name: "metadata", typ: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }] })), err: Some(Str(TypeStr)) }) }) }] }, AnalysedFunction { name: "[method]future-pt-log-error-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(21), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-pt-log-error-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(21), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Result(TypeResult { ok: Some(Record(TypeRecord { fields: [NameTypePair { name: "x", typ: S32(TypeS32) }, NameTypePair { name: "y", typ: S32(TypeS32) }, NameTypePair { name: "metadata", typ: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }] })), err: None }) }) }] }, AnalysedFunction { name: "[method]future-validate-pt-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(22), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-validate-pt-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(22), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Result(TypeResult { ok: None, err: Some(Str(TypeStr)) }) }) }] }, AnalysedFunction { name: "[method]future-print-checkout-result-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(23), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-print-checkout-result-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(23), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Str(TypeStr) }) }] }, AnalysedFunction { name: "[method]future-get-checkout-result-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(24), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-get-checkout-result-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(24), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Variant(TypeVariant { cases: [NameOptionTypePair { name: "error", typ: Some(Str(TypeStr)) }, NameOptionTypePair { name: "success", typ: Some(Record(TypeRecord { fields: [NameTypePair { name: "order-id", typ: Str(TypeStr) }] })) }, NameOptionTypePair { name: "unknown", typ: None }] }) }) }] }, AnalysedFunction { name: "[method]future-get-color-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(25), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-get-color-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(25), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Enum(TypeEnum { cases: ["red", "green", "blue"] }) }) }] }, AnalysedFunction { name: "[method]future-validate-permissions-result.subscribe", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(26), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(1), mode: Owned }) }] }, AnalysedFunction { name: "[method]future-validate-permissions-result.get", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(26), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }) }] }, AnalysedFunction { name: "[constructor]iface1", parameters: [AnalysedFunctionParameter { name: "location", typ: Record(TypeRecord { fields: [NameTypePair { name: "value", typ: Str(TypeStr) }] }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-no-op", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [] }, AnalysedFunction { name: "[method]iface1.no-op", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [] }, AnalysedFunction { name: "[method]iface1.blocking-get-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Bool(TypeBool) }] }, AnalysedFunction { name: "[method]iface1.get-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(0), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-set-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "b", typ: Bool(TypeBool) }], results: [] }, AnalysedFunction { name: "[method]iface1.set-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "b", typ: Bool(TypeBool) }], results: [] }, AnalysedFunction { name: "[method]iface1.blocking-identity-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "b", typ: Bool(TypeBool) }], results: [AnalysedFunctionResult { name: None, typ: Bool(TypeBool) }] }, AnalysedFunction { name: "[method]iface1.identity-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "b", typ: Bool(TypeBool) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(2), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-s8", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: S8(TypeS8) }], results: [AnalysedFunctionResult { name: None, typ: S8(TypeS8) }] }, AnalysedFunction { name: "[method]iface1.identity-s8", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: S8(TypeS8) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(3), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-s16", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: S16(TypeS16) }], results: [AnalysedFunctionResult { name: None, typ: S16(TypeS16) }] }, AnalysedFunction { name: "[method]iface1.identity-s16", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: S16(TypeS16) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(4), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-s32", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: S32(TypeS32) }], results: [AnalysedFunctionResult { name: None, typ: S32(TypeS32) }] }, AnalysedFunction { name: "[method]iface1.identity-s32", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: S32(TypeS32) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(5), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-s64", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: S64(TypeS64) }], results: [AnalysedFunctionResult { name: None, typ: S64(TypeS64) }] }, AnalysedFunction { name: "[method]iface1.identity-s64", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: S64(TypeS64) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(6), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-u8", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: U8(TypeU8) }], results: [AnalysedFunctionResult { name: None, typ: U8(TypeU8) }] }, AnalysedFunction { name: "[method]iface1.identity-u8", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: U8(TypeU8) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(7), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-u16", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: U16(TypeU16) }], results: [AnalysedFunctionResult { name: None, typ: U16(TypeU16) }] }, AnalysedFunction { name: "[method]iface1.identity-u16", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: U16(TypeU16) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(8), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-u32", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: U32(TypeU32) }], results: [AnalysedFunctionResult { name: None, typ: U32(TypeU32) }] }, AnalysedFunction { name: "[method]iface1.identity-u32", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: U32(TypeU32) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(9), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-u64", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: U64(TypeU64) }], results: [AnalysedFunctionResult { name: None, typ: U64(TypeU64) }] }, AnalysedFunction { name: "[method]iface1.identity-u64", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: U64(TypeU64) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(10), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-f32", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: F32(TypeF32) }], results: [AnalysedFunctionResult { name: None, typ: F32(TypeF32) }] }, AnalysedFunction { name: "[method]iface1.identity-f32", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: F32(TypeF32) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(11), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-f64", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: F64(TypeF64) }], results: [AnalysedFunctionResult { name: None, typ: F64(TypeF64) }] }, AnalysedFunction { name: "[method]iface1.identity-f64", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: F64(TypeF64) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(12), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-char", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: Chr(TypeChr) }], results: [AnalysedFunctionResult { name: None, typ: Chr(TypeChr) }] }, AnalysedFunction { name: "[method]iface1.identity-char", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: Chr(TypeChr) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(13), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-identity-string", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: Str(TypeStr) }], results: [AnalysedFunctionResult { name: None, typ: Str(TypeStr) }] }, AnalysedFunction { name: "[method]iface1.identity-string", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "x", typ: Str(TypeStr) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(14), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-get-orders", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: List(TypeList { inner: Record(TypeRecord { fields: [NameTypePair { name: "order-id", typ: Str(TypeStr) }, NameTypePair { name: "items", typ: List(TypeList { inner: Record(TypeRecord { fields: [NameTypePair { name: "product-id", typ: Str(TypeStr) }, NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "price", typ: F32(TypeF32) }, NameTypePair { name: "quantity", typ: U32(TypeU32) }] }) }) }, NameTypePair { name: "total", typ: F32(TypeF32) }, NameTypePair { name: "timestamp", typ: U64(TypeU64) }] }) }) }] }, AnalysedFunction { name: "[method]iface1.get-orders", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(15), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-set-orders", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "orders", typ: List(TypeList { inner: Record(TypeRecord { fields: [NameTypePair { name: "order-id", typ: Str(TypeStr) }, NameTypePair { name: "items", typ: List(TypeList { inner: Record(TypeRecord { fields: [NameTypePair { name: "product-id", typ: Str(TypeStr) }, NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "price", typ: F32(TypeF32) }, NameTypePair { name: "quantity", typ: U32(TypeU32) }] }) }) }, NameTypePair { name: "total", typ: F32(TypeF32) }, NameTypePair { name: "timestamp", typ: U64(TypeU64) }] }) }) }], results: [] }, AnalysedFunction { name: "[method]iface1.set-orders", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "orders", typ: List(TypeList { inner: Record(TypeRecord { fields: [NameTypePair { name: "order-id", typ: Str(TypeStr) }, NameTypePair { name: "items", typ: List(TypeList { inner: Record(TypeRecord { fields: [NameTypePair { name: "product-id", typ: Str(TypeStr) }, NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "price", typ: F32(TypeF32) }, NameTypePair { name: "quantity", typ: U32(TypeU32) }] }) }) }, NameTypePair { name: "total", typ: F32(TypeF32) }, NameTypePair { name: "timestamp", typ: U64(TypeU64) }] }) }) }], results: [] }, AnalysedFunction { name: "[method]iface1.blocking-apply-metadata", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "metadata", typ: Option(TypeOption { inner: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }) }] }, AnalysedFunction { name: "[method]iface1.apply-metadata", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "metadata", typ: Option(TypeOption { inner: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(16), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-get-option-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Option(TypeOption { inner: Bool(TypeBool) }) }] }, AnalysedFunction { name: "[method]iface1.get-option-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(17), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-set-option-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "b", typ: Option(TypeOption { inner: Bool(TypeBool) }) }], results: [] }, AnalysedFunction { name: "[method]iface1.set-option-bool", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "b", typ: Option(TypeOption { inner: Bool(TypeBool) }) }], results: [] }, AnalysedFunction { name: "[method]iface1.blocking-get-coordinates", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }] }, AnalysedFunction { name: "[method]iface1.get-coordinates", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(18), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-get-coordinates-alias", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }] }, AnalysedFunction { name: "[method]iface1.get-coordinates-alias", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(19), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-set-coordinates", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "c", typ: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }], results: [] }, AnalysedFunction { name: "[method]iface1.set-coordinates", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "c", typ: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }], results: [] }, AnalysedFunction { name: "[method]iface1.blocking-set-coordinates-alias", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "c", typ: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }], results: [] }, AnalysedFunction { name: "[method]iface1.set-coordinates-alias", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "c", typ: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }], results: [] }, AnalysedFunction { name: "[method]iface1.blocking-tuple-to-point", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "t", typ: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }, AnalysedFunctionParameter { name: "metadata", typ: Option(TypeOption { inner: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }) }], results: [AnalysedFunctionResult { name: None, typ: Result(TypeResult { ok: Some(Record(TypeRecord { fields: [NameTypePair { name: "x", typ: S32(TypeS32) }, NameTypePair { name: "y", typ: S32(TypeS32) }, NameTypePair { name: "metadata", typ: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }] })), err: Some(Str(TypeStr)) }) }] }, AnalysedFunction { name: "[method]iface1.tuple-to-point", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "t", typ: Tuple(TypeTuple { items: [S32(TypeS32), S32(TypeS32)] }) }, AnalysedFunctionParameter { name: "metadata", typ: Option(TypeOption { inner: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(20), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-pt-log-error", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "r", typ: Result(TypeResult { ok: Some(Record(TypeRecord { fields: [NameTypePair { name: "x", typ: S32(TypeS32) }, NameTypePair { name: "y", typ: S32(TypeS32) }, NameTypePair { name: "metadata", typ: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }] })), err: Some(Str(TypeStr)) }) }], results: [AnalysedFunctionResult { name: None, typ: Result(TypeResult { ok: Some(Record(TypeRecord { fields: [NameTypePair { name: "x", typ: S32(TypeS32) }, NameTypePair { name: "y", typ: S32(TypeS32) }, NameTypePair { name: "metadata", typ: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }] })), err: None }) }] }, AnalysedFunction { name: "[method]iface1.pt-log-error", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "r", typ: Result(TypeResult { ok: Some(Record(TypeRecord { fields: [NameTypePair { name: "x", typ: S32(TypeS32) }, NameTypePair { name: "y", typ: S32(TypeS32) }, NameTypePair { name: "metadata", typ: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }] })), err: Some(Str(TypeStr)) }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(21), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-validate-pt", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "pt", typ: Record(TypeRecord { fields: [NameTypePair { name: "x", typ: S32(TypeS32) }, NameTypePair { name: "y", typ: S32(TypeS32) }, NameTypePair { name: "metadata", typ: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }] }) }], results: [AnalysedFunctionResult { name: None, typ: Result(TypeResult { ok: None, err: Some(Str(TypeStr)) }) }] }, AnalysedFunction { name: "[method]iface1.validate-pt", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "pt", typ: Record(TypeRecord { fields: [NameTypePair { name: "x", typ: S32(TypeS32) }, NameTypePair { name: "y", typ: S32(TypeS32) }, NameTypePair { name: "metadata", typ: Record(TypeRecord { fields: [NameTypePair { name: "name", typ: Str(TypeStr) }, NameTypePair { name: "origin", typ: Str(TypeStr) }, NameTypePair { name: "perms", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }) }] }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(22), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-print-checkout-result", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "r", typ: Variant(TypeVariant { cases: [NameOptionTypePair { name: "error", typ: Some(Str(TypeStr)) }, NameOptionTypePair { name: "success", typ: Some(Record(TypeRecord { fields: [NameTypePair { name: "order-id", typ: Str(TypeStr) }] })) }, NameOptionTypePair { name: "unknown", typ: None }] }) }], results: [AnalysedFunctionResult { name: None, typ: Str(TypeStr) }] }, AnalysedFunction { name: "[method]iface1.print-checkout-result", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "r", typ: Variant(TypeVariant { cases: [NameOptionTypePair { name: "error", typ: Some(Str(TypeStr)) }, NameOptionTypePair { name: "success", typ: Some(Record(TypeRecord { fields: [NameTypePair { name: "order-id", typ: Str(TypeStr) }] })) }, NameOptionTypePair { name: "unknown", typ: None }] }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(23), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-get-checkout-result", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Variant(TypeVariant { cases: [NameOptionTypePair { name: "error", typ: Some(Str(TypeStr)) }, NameOptionTypePair { name: "success", typ: Some(Record(TypeRecord { fields: [NameTypePair { name: "order-id", typ: Str(TypeStr) }] })) }, NameOptionTypePair { name: "unknown", typ: None }] }) }] }, AnalysedFunction { name: "[method]iface1.get-checkout-result", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(24), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-get-color", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Enum(TypeEnum { cases: ["red", "green", "blue"] }) }] }, AnalysedFunction { name: "[method]iface1.get-color", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(25), mode: Owned }) }] }, AnalysedFunction { name: "[method]iface1.blocking-set-color", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "c", typ: Enum(TypeEnum { cases: ["red", "green", "blue"] }) }], results: [] }, AnalysedFunction { name: "[method]iface1.set-color", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "c", typ: Enum(TypeEnum { cases: ["red", "green", "blue"] }) }], results: [] }, AnalysedFunction { name: "[method]iface1.blocking-validate-permissions", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "p", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }], results: [AnalysedFunctionResult { name: None, typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }] }, AnalysedFunction { name: "[method]iface1.validate-permissions", parameters: [AnalysedFunctionParameter { name: "self", typ: Handle(TypeHandle { resource_id: AnalysedResourceId(27), mode: Borrowed }) }, AnalysedFunctionParameter { name: "p", typ: Flags(TypeFlags { names: ["read", "write", "exec", "close"] }) }], results: [AnalysedFunctionResult { name: None, typ: Handle(TypeHandle { resource_id: AnalysedResourceId(26), mode: Owned }) }] }] })]

    // TODO: verify that it has the expected stub interface
}
